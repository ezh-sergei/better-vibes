---
description: Guidelines for creating, organizing, and managing Cursor rules
globs: .cursor/rules/**/*
alwaysApply: false
---

# MDC File Format Guide

Cursor rules (MDC files) provide context-specific instructions to AI assistants. This guide explains how to create and maintain these files properly.

## File Structure

Each MDC file consists of two main parts:

1. **Frontmatter** - Configuration metadata at the top of the file
2. **Markdown Content** - The actual instructions in Markdown format

## CRITICAL: Frontmatter

The frontmatter must be the first thing in the file and must be enclosed between triple-dash lines:

```md
---
# Configure your rule based on desired behavior:
description: Brief description of what the rule does
globs: **/*.js, **/*.ts # Optional: Comma-separated list, not an array
alwaysApply: false # Set to true for global rules
---
```

> **Important**: Despite the appearance, the frontmatter is not strictly YAML formatted. The `globs` field is a comma-separated list and should NOT include brackets `[]` or quotes `"`.

### Guidelines for Setting Fields

- **description**: Should be agent-friendly and clearly describe when the rule is relevant. Format as `<topic>: <details>` for best results.
- **globs**:
  - If a rule is only relevant in very specific situations, leave globs empty so it's loaded only when applicable to the user request.
  - If the only glob would match all files (like `**/*`), leave it empty and set `alwaysApply: true` instead.
  - Otherwise, be as specific as possible with glob patterns to ensure rules are only applied with relevant files.
- **alwaysApply**: Use sparingly for truly global guidelines.

### Glob Pattern Examples

- \*\_.js - All JavaScript files
- src/\*\_.jsx - All JSX files in the src directory
- **/components/**/\*.vue - All Vue files in any components directory

## IMPORTANT: Rule Structure

Every rule file should follow this structure:

- H1 title ("# Rule Name")
- Brief description (1-2 sentences)
- Content sections with H2 headings
- XML tag blocks for rule groupings
- Persona section at the top as `<persona>` when relevant (especially for mode rules)
- Self-check section (if applicable)
- Memory Bank References section (H2 heading)
- Related Rule Lookups section (H2 heading)
- Examples section (if needed)

### Content Structure

```markdown
## Section Title

<guideline_category>

- First guideline
- Second guideline with detail
- Third guideline
  </guideline_category>
```

## Rule Writing Style

<rule_conciseness>

- Write rules that are concise and direct - aim for 1-2 sentences per rule.
- Limit each rule to 1-2 lines maximum where possible.
- Use imperative voice: "Do this" instead of "You should do this".
- Remove unnecessary words like "Please", "You should", "It's recommended to".
- Focus on specific, actionable guidance rather than general advice.
- Scope: These concision rules apply to writing Cursor rule files (MDC) themselves. In general agent responses, follow `agent.mdc`'s "concise but complete" guidance.
  </rule_conciseness>

<xml_tag_usage>

- Use semantic XML tags to group related rules together.
- Name tags descriptively based on their content (e.g., <code_quality>, <documentation_standards>).
- Use snake_case for tag names (e.g., <error_handling>, <naming_conventions>).
- Keep tag content focused on a single topic or concern.
- Limit each tag block to 4-8 rules for better readability.
- Formatting: Add a blank line before the closing tag and a blank line after it. Do not indent closing tags; they must start at column 1.

</xml_tag_usage>

<rule_organization>

- Begin with most critical rules at the top.
- Group related rules together within appropriate XML tags.
- Remove duplicate content across rules.
- Organize rules by logical flow - setup → core functionality → edge cases.
- Include examples for complex or easily misunderstood rules.
  </rule_organization>

## Special Features

### File References

You can reference other files from within an MDC file using the markdown link syntax:

```md
[rule-name.mdc](mdc:.cursor/rules/rule-name.mdc)
```

When this rule is activated, the referenced file will also be included in the context. **Important**: Be mindful of what you hyperlink, especially in rules where `alwaysApply` is true, as this affects context usage.

### Self-Check Sections

For complex behavioral rules, include a self-check section:

```markdown
## Self-Check Before Responding

<self_check>

- Have you followed all guidelines in this rule?
- Did you check for specific condition X?
- Are you adhering to the style requirements?
  </self_check>
```

### Code Blocks

Use fenced code blocks for examples:

````markdown
```javascript
// Example code
function example() {
  return "This is an example";
}
```
````

## Best Practices

<naming_practices>

- Use kebab-case for all filenames (e.g., `your-rule-name.mdc`).
- Group related rules with consistent prefixes (e.g., `frontend-*`, `agent-*`).
- Make names descriptive of the rule's purpose.
- Use snake_case for XML tag names (e.g., <error_handling>, <code_quality>).
  </naming_practices>

<content_practices>

- Start with a clear title (H1) and brief description.
- Use H2 headings to organize major sections.
- Group related rules within semantic XML tags.
- Keep each rule concise - one idea per rule.
- Include examples for complex concepts.
- Add a self-check section for behavioral rules.
- Move detailed descriptions and complex explanations to the memory bank.
- Use memory bank references section to link to specific memories.
- Limit related rule lookups to the most relevant ones.
  </content_practices>

<minimal_principle>

- Each concept should appear only once across all rules.
- Scan the rules folder to check if a rule already exists.
- Keep content focused and concise.
- Make instructions clear and actionable.
- Link to related rules rather than duplicating content.
  </minimal_principle>

<length_considerations>

- Keep files focused on a single topic or closely related topics
- Aim for under 200 lines per rules file
- If a rule becomes too long, first try to trim content without losing impact
- For complex rules that can't be trimmed, refactor into multiple logically related files
- Hyperlink to related rules rather than duplicating content
  </length_considerations>

## Usage in Cursor

When working with files in Cursor, rules are automatically applied when:

1. The file you're working on matches a rule's glob pattern
2. A rule has `alwaysApply: true` set in its frontmatter
3. The agent thinks the rule's description matches the user request
4. User explicitly references a rule in a conversation with Cursor's AI

## Creating/Updating Rules

When adding or updating rules:

- Maintain the frontmatter format as is
- Update Related Rule Lookups in other files if needed
- Keep glob patterns specific to the rule's scope
- When changes are made to multiple MDC files from a single request, review other affected rules
- Consider whether changes should propagate to related rules

## Memory Bank References

<documentation_references>

- **Memory Bank**: See `docs/memory-bank/` for complete reference to this Project
  </documentation_references>

## Related Rule Lookups

<related_rules>

- @agent.mdc - Master agent behavior
- @code-general.mdc - Global coding standards
  </related_rules>

## Examples

Example of a well-formatted rule:

````md
---
description: Standards for TypeScript code formatting
globs: src/**/*.ts, src/**/*.tsx
alwaysApply: false
---

# TypeScript Format

Rules for TypeScript code formatting and style.

## Formatting Guidelines

<spacing_and_indentation>

- Use consistent spacing and indentation (2 spaces).
- Add semicolons at the end of statements.
- Use single quotes for strings.
- Use trailing commas in multi-line structures.
  </spacing_and_indentation>

<type_definitions>

- Prefer interfaces for object types that will be extended.
- Use type aliases for unions, intersections, and simple types.
- Export all shared types.
  </type_definitions>

## Related Rule Lookups

<related_rules>

- @ts-typing.mdc - TypeScript type definition standards
- @error-handling.mdc - Error handling guidelines
  </related_rules>

## Examples

Example of properly formatted TypeScript:

```typescript
interface UserProfile {
  id: string;
  name: string;
  preferences: {
    theme: "light" | "dark";
    notifications: boolean;
  };
}

function formatUser(user: UserProfile): string {
  try {
    return `${user.name} (${user.id})`;
  } catch (error) {
    logError("Failed to format user", { userId: user.id });
    return "Unknown User";
  }
}
```
````

```md

```
